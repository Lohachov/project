import java.awt.*;
import java.awt.datatransfer.*;

import java.awt.dnd.*;
import java.awt.dnd.peer.*;
import java.awt.dnd.DropTarget;
import javax.swing.*;


public class DragDrop implements DragGestureListener, DragSourceListener,
DropTargetListener, Transferable {

static final DataFlavor[] supportedFlavors = {null};

static {
try {
supportedFlavors[0] = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType);
} catch (Exception ex) {
ex.printStackTrace();
}
}
Object object;

public Object getTransferData(DataFlavor flavor) {
if (flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType)) {
return object;
} else {
return null;
}
}

public DataFlavor[] getTransferDataFlavors() {
return supportedFlavors;
}

public boolean isDataFlavorSupported(DataFlavor flavor) {

return flavor.isMimeTypeEqual(DataFlavor.javaJVMLocalObjectMimeType);
}

public void dragGestureRecognized(DragGestureEvent ev) {
ev.startDrag(null, this, this);
}
public void dragDropEnd(DragSourceDropEvent ev) {
}

public void dragEnter(DragSourceDragEvent ev) {
}

public void dragExit(DragSourceEvent ev) {
}

public void dragOver(DragSourceDragEvent ev) {
object = ev.getSource();
}

public void dropActionChanged(DragSourceDragEvent ev) {
}

public void dragEnter(DropTargetDragEvent ev) {
}

public void dragExit(DropTargetEvent ev) {
}

public void dragOver(DropTargetDragEvent ev) {
dropTargetDrag(ev);
}

public void dropActionChanged(DropTargetDragEvent ev) {
dropTargetDrag(ev);
}

void dropTargetDrag(DropTargetDragEvent ev) {
ev.acceptDrag(ev.getDropAction());
}

public void drop(DropTargetDropEvent ev) {
ev.acceptDrop(ev.getDropAction());
try {
Object target = ev.getSource();
Object source = ev.getTransferable().getTransferData(supportedFlavors[0]);

Component component = ((DragSourceContext) source).getComponent();

Container oldContainer = component.getParent();
Container container = (Container) ((DropTarget) target).getComponent();
container.add(component);
oldContainer.validate();
oldContainer.repaint();
container.validate();
container.repaint();
}
catch (Exception ex) {
ex.printStackTrace();
}
ev.dropComplete(true);
}
