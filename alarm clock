import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;


public final class AlarmClock {
  

  public static void main(String... aArgs) throws InterruptedException {
    log("Main started.");
    AlarmClock alarmClock = new AlarmClock(3, 1, 20);
    alarmClock.activateAlarmThenStop();
   
    log("Main ended.");
  }
  
  AlarmClock(long aInitialDelay, long aDelayBetweenBeeps, long aStopAfter){
    fInitialDelay = aInitialDelay;
    fDelayBetweenRuns = aDelayBetweenBeeps;
    fShutdownAfter = aStopAfter;
    fScheduler = Executors.newScheduledThreadPool(NUM_THREADS);    
  }
  

  void activateAlarmThenStop(){
    Runnable soundAlarmTask = new SoundAlarmTask();
    ScheduledFuture<?> soundAlarmFuture = fScheduler.scheduleWithFixedDelay(
      soundAlarmTask, fInitialDelay, fDelayBetweenRuns, TimeUnit.SECONDS
    );
    Runnable stopAlarm = new StopAlarmTask(soundAlarmFuture);
    fScheduler.schedule(stopAlarm, fShutdownAfter, TimeUnit.SECONDS);
  }


  private final ScheduledExecutorService fScheduler;
  private final long fInitialDelay;
  private final long fDelayBetweenRuns;
  private final long fShutdownAfter;
  
  private static void log(String aMsg){
    System.out.println(aMsg);
  }

 
  private static final int NUM_THREADS = 1;
  private static final boolean DONT_INTERRUPT_IF_RUNNING = false;
  
  private static final class SoundAlarmTask implements Runnable {
    @Override public void run() {
      ++fCount;
      log("beep " + fCount);
    }
    private int fCount;
  }
  
  private final class StopAlarmTask implements Runnable {
    StopAlarmTask(ScheduledFuture<?> aSchedFuture){
      fSchedFuture = aSchedFuture;
    }
    @Override public void run() {
      log("Stopping alarm.");
      fSchedFuture.cancel(DONT_INTERRUPT_IF_RUNNING);
     
      fScheduler.shutdown();
    }
    private ScheduledFuture<?> fSchedFuture;
  }
} 
